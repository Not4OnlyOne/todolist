{"version":3,"sources":["logo.svg","serviceWorker.js","ToDoItems.jsx","ToDoApp.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ToDoItems","props","_useState","useState","_useState2","Object","slicedToArray","editBool","setEditBool","_useState3","_useState4","line","setLine","react_default","a","createElement","Fragment","Paper","elevation","style","padding","Box","display","flexGrow","contentEditable","textDecoration","fontSize","addedItem","Fab","color","aria-label","onClick","backgroundColor","Check_default","marginLeft","Edit_default","onDelete","id","DeleteForever_default","ToDoApp","additem","setItem","itemAdded","displayItem","deleteItem","olditems","filter","arrElem","index","paddingTop","minHeight","margin","textAlign","fontFamily","justifyContent","TextField","label","onChange","event","target","value","concat","toConsumableArray","NoteAdd_default","map","itemval","src_ToDoItems","key","ReactDOM","render","src_ToDoApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6MCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0JCyDSC,EA9DE,SAACC,GAAQ,IAAAC,EAEOC,mBAAS,SAFhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEfK,EAFeH,EAAA,GAENI,EAFMJ,EAAA,GAAAK,EAIDN,oBAAS,GAJRO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIfE,EAJeD,EAAA,GAIVE,EAJUF,EAAA,GAgBtB,OACIG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAACC,QAAQ,SAGpCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,QAAQ,OAAO5B,EAAG,GACxBmB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAK3B,EAAG,EAAG6B,SAAU,GACpBV,EAAAC,EAAAC,cAAA,QAAMS,gBAAiBjB,EAGvBY,MAAO,CAACM,eAAgBd,EAAO,eAAiB,OAAOe,SAAS,OAAON,QAAQ,SAAUnB,EAAM0B,YAGhGd,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAK3B,EAAG,GACRmB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,WAAWC,QArBjC,WACVnB,GAAQ,IAoBoDO,MAAO,CAACa,gBAAgB,UAAUH,MAAM,UAClGhB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,QAIFD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAK3B,EAAG,GACRmB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,OAAOC,QA9B7B,WACVvB,EAAY,SA6B4CW,MAAO,CAACe,WAAW,QACzErB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,QAKFD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAK3B,EAAG,GACRmB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,MAAM,YAAYC,aAAW,SAASC,QAAS,WAChD9B,EAAMmC,SAASnC,EAAMoC,KACrBlB,MAAO,CAACe,WAAW,QACtBrB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,UAYDD,EAAAC,EAAAC,cAAA,sCCDMwB,EA9DA,WAAI,IAAArC,EAESC,mBAAS,IAFlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAERsC,EAFQpC,EAAA,GAEAqC,EAFArC,EAAA,GAAAK,EAIeN,mBAAS,IAJxBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIRiC,EAJQhC,EAAA,GAIEiC,EAJFjC,EAAA,GAgBTkC,EAAW,SAACP,GACdM,EAAY,SAACE,GACT,OAAOA,EAASC,OAAO,SAACC,EAAQC,GAC5B,OAAOA,IAAQX,OAO3B,OACIxB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,UAAW,EAAGC,MAAO,CAACC,QAAQ,OAAO6B,WAAW,MAAMC,UAAU,QAAQC,OAAO,QACvFtC,EAAAC,EAAAC,cAAA,MACAI,MAAO,CAACa,gBAAgB,UACxBH,MAAM,QACNH,SAAS,OACT0B,UAAU,SACVhC,QAAQ,OACRiC,WAAW,eANX,eAOiBxC,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,QAAQ,OAAOgC,eAAe,UAEnCzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWlB,GAAG,iBAAiBmB,MAAM,aAAcC,SAjCvC,SAACC,GACbjB,EAAQiB,EAAMC,OAAOC,QAgCmDA,MAAOpB,IAF/E,WAKA3B,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMT,MAAO,CAACa,gBAAgB,UAAUH,MAAM,SAAUC,aAAW,MAAMC,QAjC/D,WACVY,EAAY,SAACE,GACT,SAAAgB,OAAAxD,OAAAyD,EAAA,EAAAzD,CAAWwC,GAAX,CAAoBL,MAGxBC,EAAQ,MA6BR5B,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,QAIAD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACC2B,EAAUsB,IAAI,SAACC,EAAQjB,GACpB,OAAQnC,EAAAC,EAAAC,cAACmD,EAAD,CACRC,IAAKnB,EACLX,GAAIW,EACJZ,SAAUQ,EACVjB,UAAWsC,UCvDvBG,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAEdC,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.72ebcd8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React , { useState }from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\nconst ToDoItems =(props)=>{\r\n   \r\n    const [editBool,setEditBool]=useState(\"false\");\r\n\r\n    const [line,setLine]=useState(false);\r\n\r\n    const onEdit =()=>{\r\n        setEditBool(\"true\");\r\n    }\r\n    const onLine =()=>{\r\n        setLine(true);\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n        <Paper elevation={2} style={{padding:\"30px\"}}>\r\n       \r\n        \r\n         <Box display=\"flex\" p={1} >\r\n        <Box p={1} flexGrow={1} >\r\n         <span contentEditable={editBool} \r\n        \r\n         \r\n         style={{textDecoration: line ? \"line-through\" : \"none\",fontSize:\"20px\",padding:\"10px\"}}>{props.addedItem}</span>\r\n        </Box>\r\n\r\n        <Box p={1} >\r\n        <Fab color=\"success\" aria-label=\"complete\" onClick={onLine} style={{backgroundColor:\"#5cb85c\",color:\"white\"}}>\r\n          <CheckIcon />\r\n         </Fab>\r\n        </Box>\r\n        \r\n        <Box p={1} >\r\n        <Fab color=\"primary\" aria-label=\"edit\" onClick={onEdit} style={{marginLeft:\"5px\"}}>\r\n          <EditIcon />\r\n         </Fab>\r\n        </Box>\r\n        \r\n\r\n        <Box p={1} >\r\n        <Fab  color=\"secondary\" aria-label=\"delete\" onClick={()=>{\r\n             props.onDelete(props.id);\r\n         }}  style={{marginLeft:\"5px\"}}>\r\n          <DeleteForeverIcon />\r\n         </Fab>\r\n        </Box>\r\n\r\n        </Box>\r\n        \r\n\r\n         \r\n\r\n         \r\n         \r\n         </Paper>\r\n         <br/>\r\n        </>\r\n    );\r\n}\r\nexport default ToDoItems;","import React, { useState } from 'react'\r\nimport ToDoItems from './ToDoItems';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst ToDoApp =()=>{\r\n\r\n    const [additem,setItem]=useState('');\r\n\r\n    const [itemAdded,displayItem]=useState([]);\r\n\r\n    const enterItem=(event)=>{\r\n        setItem(event.target.value);\r\n    }\r\n    const display=()=>{\r\n        displayItem((olditems)=>{\r\n            return [...olditems,additem];\r\n        }\r\n        );\r\n        setItem('');\r\n    }\r\n    const deleteItem=(id)=>{\r\n        displayItem((olditems)=>{\r\n            return olditems.filter((arrElem,index)=>{\r\n                return index!==id;\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        <Paper  elevation={3} style={{padding:\"20px\",paddingTop:\"1px\",minHeight:\"100vh\",margin:\"0px\"}}>\r\n        <h1 \r\n        style={{backgroundColor:\"#7e57c2\",\r\n        color:\"white\",\r\n        fontSize:\"30px\",\r\n        textAlign:\"center\",\r\n        padding:\"20px\",\r\n        fontFamily:\"sans-serif\"}}\r\n        >Notepad App</h1><br/>\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n        \r\n        <TextField id=\"standard-basic\" label=\"Enter Note\"  onChange={enterItem} value={additem}/>    \r\n        &nbsp;&nbsp;\r\n\r\n        <Fab  style={{backgroundColor:\"#7e57c2\",color:\"white\"}} aria-label=\"add\" onClick={display} >\r\n        <NoteAddIcon />\r\n        </Fab>\r\n\r\n        </Box>\r\n        <br/>\r\n        <ol >\r\n        {itemAdded.map((itemval,index)=>{\r\n            return (<ToDoItems \r\n            key={index}\r\n            id={index}\r\n            onDelete={deleteItem}\r\n            addedItem={itemval} />)\r\n        })}\r\n        </ol>\r\n        \r\n        </Paper>\r\n        </>\r\n    )\r\n}\r\nexport default ToDoApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ToDoApp from './ToDoApp'\n\nReactDOM.render(<ToDoApp/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}